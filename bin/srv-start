#!/usr/bin/env jruby

if ENV['BARCODE_MOBILE_ENV']
  require 'pry'

  $: << File.join(File.dirname(__FILE__), '..')
  puts "RUN in: #{ENV['BARCODE_MOBILE_ENV']}"

  require 'config/config'
  $config = Configuration.load_config(ENV['BARCODE_MOBILE_ENV'])

  # $zk_con = ENV['ZOOKEEPER_CONNECTION'] ? ENV['ZOOKEEPER_CONNECTION'] : $config['connection']['zookeeper']
  $kf_con = ENV['KAFKA_CONNECTION'] ? ENV['KAFKA_CONNECTION'] : $config['connection']['kafka']

  require 'java'
  require 'json'
  require 'celluloid/current'

  $: << 'lib'

  require 'logging'
  Logging.supervise as: :logger
  $log = Celluloid::Actor[:logger]
  $log.info "SRV-BARCODE-MOBILE starting..."

  $RUNNING = true

  trap('SIGINT') do
    $RUNNING = false
  end

  # Redis
  require 'cache'
  redis_opts = {
      url: $config['connection']['redis']['url'],
      namespace: $config['connection']['redis']['namespace']
  }
  $cache  = Cache::pool redis_opts
  # binding.pry
  # (0..9).each {|d| $cache.with {|c| c.set "k0#{d}", "v0#{d}" }}
  # $cache.with {|c| c.scan_each(match: "k*"){|k| p "key: #{k}, v: #{c.get k}"} }


  require 'kafka/consumer'
  require 'workers/consumer_nsi'

  consumer_opts = {
      'bootstrap.servers' => $kf_con,
      'group.id' => 'srv-barcode-mobile-consumer-nsi'
  }
  topics = $config['kafka']['topics_nsi']

  Workers::ConsumerNsi.supervise as: :kafka_consumer_nsi, args: [consumer_opts, topics]
  Celluloid::Actor[:kafka_consumer_nsi].async.process_from_beginning

  # require 'ws-server'

  while $RUNNING
    sleep 2.0
  end

  Celluloid::Actor[:kafka_consumer_nsi].terminate

  $log.info "SRV-BARCODE-MOBILE shutdown"
else
  puts 'Error: not found "BARCODE_MOBILE_ENV"!'
end
