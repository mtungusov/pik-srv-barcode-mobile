#!/usr/bin/env jruby

if ENV['BARCODE_MOBILE_ENV']
  require 'pry'

  $: << File.join(File.dirname(__FILE__), '..')
  puts "RUN in: #{ENV['BARCODE_MOBILE_ENV']}"

  require 'config/config'
  $config = Configuration.load_config(ENV['BARCODE_MOBILE_ENV'])

  $kf_con = ENV['KAFKA_CONNECTION'] ? ENV['KAFKA_CONNECTION'] : $config['connection']['kafka']

  require 'java'
  require 'json'
  require 'celluloid/current'

  $: << 'lib'

  require 'logging'
  Logging.supervise as: :logger
  $log = Celluloid::Actor[:logger]
  $log.info "SRV-BARCODE-MOBILE Producer starting..."

  $RUNNING = true

  trap('SIGINT') do
    $RUNNING = false
  end

  require 'util'

  require 'kafka/producer'

  #################
  # PRODUCER RANDOM
  #################
  require 'workers/producer_random'

  producer_opts = {
      producer: { 'bootstrap.servers' => $kf_con },
      timeout: $config['connection']['timeout_in_ms']
  }
  Workers::ProducerRandom.supervise as: :kafka_producer_random, args: [producer_opts, $config['kafka']['topic']]

  while $RUNNING
    Celluloid::Actor[:kafka_producer_random].process
    sleep 2.0
  end

  Celluloid::Actor[:kafka_producer_random].shutdown
  #####################
  # PRODUCER RANDOM END
  #####################

  #################
  # PRODUCER NSI
  #################
  # require 'workers/producer_nsi'
  #
  # producer_opts = {
  #     producer: { 'bootstrap.servers' => $kf_con },
  #     timeout: $config['connection']['timeout_in_ms']
  # }
  # Workers::ProducerNsi.supervise as: :kafka_producer_nsi, args: [producer_opts]
  #
  # while $RUNNING
  #   Celluloid::Actor[:kafka_producer_nsi].process_podr
  #   # Celluloid::Actor[:kafka_producer_nsi].process_sotr
  #   sleep 2.0
  # end
  #
  # Celluloid::Actor[:kafka_producer_nsi].terminate
  # #####################
  # # PRODUCER NSI END
  # #####################



  $log.info "SRV-BARCODE-MOBILE Producer shutdown"
else
  puts 'Error: not found "BARCODE_MOBILE_ENV"!'
end
